<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.0.2</version>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>



<plugin>
    			<groupId>org.apache.maven.plugins</groupId>
   				 <artifactId>maven-war-plugin</artifactId>
    			<version>3.3.1</version>
				</plugin>
			<plugin>
      			<groupId>org.apache.maven.plugins</groupId>
      			<artifactId>maven-compiler-plugin</artifactId>
      			<version>3.8.1</version>
			</plugin>




<dependency>
		    <groupId>org.slf4j</groupId>
		    <artifactId>slf4j-api</artifactId>
		    <version>2.0.7</version>x
		</dependency>

		<dependency>
		    <groupId>org.slf4j</groupId>
		    <artifactId>slf4j-log4j12</artifactId>
		    <version>2.0.7</version>
		    <type>pom</type>
		    <scope>test</scope>x
		</dependency>
			
		<dependency>
		    <groupId>org.slf4j</groupId>
		    <artifactId>slf4j-reload4j</artifactId>
		    <version>2.0.7</version>x
		    <scope>test</scope>
		</dependency>

		
		<dependency>
		    <groupId>org.slf4j</groupId>
		    <artifactId>slf4j-simple</artifactId>
		    <version>2.0.7</version>
		    <scope>test</scope>
		</dependency>


Capacitacion capa = getCapa(idcapa, rutcliente, dia, hora, lugar, duracion, cantAsist, nomCapa);
<!--<jsp:include page="navbar.jsp"></jsp:include>  -->




package cl.vrol;



import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.SecurityBuilder;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;


@Configuration
public class WebSecurityConfig implements implements WebSecurityConfigurer<WebSecurity> {

	@Autowired
	private DataSource dataSource;
	
	@Autowired
	private BCryptPasswordEncoder passEncoder;
	
	
	@Autowired
	public void configurerSecurityGlobal(AuthenticationManagerBuilder builder) throws Exception{
		builder.jdbcAuthentication()
		.dataSource(dataSource)
		.passwordEncoder(passEncoder)
		.usersByUsernameQuery("SELECT username, password, enabled FROM users WHERE username=?")
		.authoritiesByUsernameQuery("SELECT u.username, r.rol FROM roles r INNER JOIN users u ON r.user_id=u.id WHERE u.username=?;");
	}

	@Override
    public void configure(WebSecurity web) throws Exception {
        web.ignoring().antMatchers("/", "/css/**", "/img/**", "/js/**", "/Caledario/", "/views/contacto/**",
                "/views/juegos/**", "/views/jugadores/nuevoinscrito", "/views/jugadores/inscribir", "/Juntas/",
                "/mesas/", "/mesas/ver/**");
    }

	
}

th:if="${session.perfil == 'Narrador' || session.perfil == 'Administrador'}" th:classappend="show"


	@Bean
	public BCryptPasswordEncoder passEncoder() {
		return new BCryptPasswordEncoder();
	}


	@Override
	public String getPassword() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getUsername() {
		// TODO Auto-generated method stub
		return null;
	}



